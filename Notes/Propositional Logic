{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Propositional Logic #"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What are propositions? ##"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Propositions are anything that can be eithere **true** or **false**. This could include the following: \n",
    "* Statements such as \"Birds can fly\", or \"$\\sqrt{3}$ is rational\"\n",
    "* Well defined equations with no free variables, such as \"$1 + 1 = 5$\"\n",
    "\n",
    "Proportions are **not**: \n",
    "* Variables like $x$ or 5 \n",
    "* Equations with free variables, like $P(X) = y$\n",
    "* Statements that aren't clearly true or false, such as: \"I like trains\"\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Connectives ###\n",
    "\n",
    "Propositions are the building blocks which can be used to form more complex statements. Here are the three main types: \n",
    "* **Conjunction** is the **and** operation: $P \\land Q$, where the statement as a whole is true if $P$ **and** $Q$ are true respectively \n",
    "\n",
    "* **Disjunction** is the **or** operation: $P \\lor Q$, where the statement as a whole is true if $P$ **or** $Q$ is true\n",
    "\n",
    "* **Negation** is the **not** operation: If $P$ is true, then  $\\lnot P$ is false\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### De Morgan Laws ###\n",
    "\n",
    "De Morgan's Law are used to show how negation can be *distributed* across conjunctions or disjunctions: \n",
    "\n",
    "$\\lnot (P \\land Q) \\equiv (\\lnot P \\lor \\lnot Q)$\n",
    "\n",
    "$\\lnot (P \\lor Q) \\equiv (\\lnot P \\land \\lnot Q)$\n",
    "\n",
    "* The statement above can be interpreted as: \"If neither $P$ nor $Q$ are true, then $P$ and $Q$ must both be false\"\n",
    "\n",
    "$\\lnot(\\forall x)(P(x)) \\iff (\\exists x)(\\lnot P(x))$\n",
    "\n",
    "$\\lnot(\\exists x)(P(x)) \\iff (\\forall x)(\\lnot P(x))$\n",
    "\n",
    "* This statement is equivalent to the following: \"If $P(x)$ isn't true for every $x$, then there exits an $x$ where $P(x)$ is false\"\n",
    "\n",
    "\n",
    "\n",
    "De Morgan Laws are useful because they allow  us to see how propositions change when negations are added\n",
    "\n",
    "\n",
    "#### The Distributive Law of Propositional Logic: #### \n",
    "$(P \\lor Q) \\land R \\equiv (P \\land R) \\lor (Q \\land R)$\n",
    "* Represents the distributive property of conjunction (AND) over disjunction (OR)"
   ]
  },
  {
   "attachments": {
    "image.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implication ###\n",
    "\n",
    "One proposition can **imply** another, which takes on the following form: \n",
    "\n",
    "$\n",
    "P \\implies Q\n",
    "$\n",
    "\n",
    "We define the **converse** of a implication as: \n",
    "$\n",
    "Q \\implies P\n",
    "$\n",
    "\n",
    "In English, the statement above can be translated into the following: **\"If P, then Q\"**\n",
    "\n",
    "**Properties of Implication**\n",
    "* **Reversible**: If $P \\implies Q$ and $Q \\implies R$ are both true, then $P \\implies R$ must also be true\n",
    "* **Contraposition**: The contrapositive of an implication $P \\implies Q$   is   $\\lnot Q \\implies \\lnot P$\n",
    "* **Modus Ponens**: If $P \\implies Q$ is true and $P$ is true, then $Q$ must also be true\n",
    "* **Modus Tollens**: If $P \\implies Q$ is true, and $Q$ is false, then $P$ must also be false \n",
    "* **Law of Non-Contradition**: It's not possible for both $P \\implies Q$ and $P \\implies \\lnot Q$ to be true at the same time\n",
    "\n",
    "*Vicariously* True: If $P$ is false in the implication: $P \\implies Q$, then regardless of the value of $Q$,  we consider the implication *vicariously* true\n",
    "\n",
    "Here is a truth table for implication: \n",
    "\n",
    "![image.png](attachment:image.png)\n",
    "\n",
    "In general, if two statements share the same truth table, then they are considered to be *logically equivalent*\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Quantifiers ### \n",
    "\n",
    "Sometimes, we need to define a specific type of variable to work with a propositional clause. For instance, take the proposition, \"*There exists a natural numbers that is equal to the square of itself*\"\n",
    "\n",
    "We would write this as: \n",
    "\n",
    "$(\\exists x \\in \\mathbb{N})(x=x^2)$\n",
    "\n",
    "In general, there are two kinds of **quantifiers**: \n",
    "* *Universal quantifier*: $\\forall$ (\"For all\")\n",
    "* *Existential quantifier*: $\\exists$ (\"There exists\")\n",
    "\n",
    "Consider some examples: \n",
    "1) $\\forall n \\in \\mathbb{N} : n^2 + n + 41 \\text{ is prime}$\n",
    "    * For all natural numbers, $n$, $n^2 + n + 41$ is prime\n",
    "2) $\\exists k \\in \\mathbb{Z} : (k \\text{ is even}) \\land (k \\text{ is odd})$\n",
    "    * There is an integer $k$ that is both even and odd\n",
    "\n",
    "Now let's look at some more tricky examples: \n",
    "1)  $(\\forall x \\in \\mathbb{Z})(\\exists y \\in \\mathbb{Z}) : (x < y)$\n",
    "2) $ (\\exists y \\in \\mathbb{Z})(\\forall x \\in \\mathbb{Z}) : (x < y)$\n",
    "\n",
    "Now, these two might look very similar, and quite frankly they do! However, they represent two different statements\n",
    "\n",
    "1) For each integer x, there exists another one y, which is larger than it\n",
    "2) There exists a single integer y, where for all other integers, y is the largest\n",
    "\n",
    "So depending on the order in which you place your quantifiers, the truth of the statement may differ (first statement is true, second is false)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Much Ado About Negation ###\n",
    "\n",
    "How do negations on conjunctions and disjunctions work?\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
